name: Build CI

on: [ push, pull_request ]

env:
  HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1

jobs:
    build:

        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-11 ]
                python-version: [ 3.7, 3.8, 3.9, '3.10' ]
                exclude:
                    -   os: macos-11
                        python-version: 3.9
                    -   os: macos-11
                        python-version: '3.10'

        env:
            DISPLAY: ':99.0'
        steps:
            -   name: Get repository
                uses: actions/checkout@v2
            -   name: apt-get update (Linux)
                if: runner.os == 'Linux'
                run: sudo apt-get update
            -   name: brew update (macOS)
                if: runner.os == 'MacOS'
                run: brew update
            -   name: Set up XCode (macOS)
                if: runner.os == 'MacOS'
                uses: maxim-lobanov/setup-xcode@v1
                with:
                    xcode-version: '9.0'
            -   name: Setup Qt requirements for Linux
                uses: tlambert03/setup-qt-libs@v1
            -   name: Setup Graphviz
                uses: ts-graphviz/setup-graphviz@v1
            -   name: Cache LLVM and Clang
                id: cache-llvm
                uses: actions/cache@v2
                with:
                    path: ${{ runner.temp }}/llvm
                    key: llvm-9
            -   name: Install LLVM and Clang
                uses: KyleMayes/install-llvm-action@v1
                with:
                    version: "9.0"
                    directory: ${{ runner.temp }}/llvm
                    cached: ${{ steps.cache-llvm.outputs.cache-hit }}
            -   name: Install R
                uses: r-lib/actions/setup-r@v2
                with:
                    r-version: '4.2.2' # The R version to download (if necessary) and use.
            -   name: Install homebrew on Linux
                if: runner.os == 'Linux'
                uses: Homebrew/actions/setup-homebrew@master
            -   name: Install cURL on Linux
                if: runner.os == 'Linux'
                run: sudo apt-get install libcurl4-openssl-dev
            -   name: Install cURL on Windows
                if: runner.os == 'Windows'
                run: choco install openssl
            -   name: Test R installation
                run: Rscript -e "print('R script ran successfully')"
            -   name: Install kallisto
                run: |
                    if [ "$RUNNER_OS" == "Linux" ]; then
                         brew install kallisto
                    elif [ "$RUNNER_OS" == "macOS" ]; then
                         brew install kallisto
                    elif [ "$RUNNER_OS" == "Windows" ]; then
                         choco install wget -y
                         wget  https://github.com/pachterlab/kallisto/releases/download/v0.48.0/kallisto_windows-v0.48.0.zip
                         7z x kallisto*.zip
                         echo "${GITHUB_WORKSPACE}/kallisto" >> $GITHUB_PATH
                    else
                         echo "$RUNNER_OS not supported"
                         exit 1
                    fi
                shell: bash
            -   name: Test kallisto installation
                run: |
                    echo ${PATH}
                    kallisto version
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    cache: 'pip'
            -   name: Install dependencies
                run: |
                    python -m pip install --upgrade pip wheel
                    python -m pip install coverage coveralls pytest pytest-qt pytest-xvfb py
                    python -m pip install .[all]
            -   name: Test with pytest
                run: |
                    coverage run --source=rnalysis/ -m pytest tests/

                continue-on-error: false
            -   name: Coveralls
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    coverage report -m
                    coveralls --service=github
